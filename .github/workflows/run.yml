name: Build and Security Scan

on:
  push:
    branches:
      - main

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    steps:
      # Exemplo de como checar o c√≥digo-fonte do reposit√≥rio
      - name: Checar o c√≥digo-fonte do reposit√≥rio
        uses: actions/checkout@v4

      # Exemplo de como instalar e configurar o Node.js
      # - name: Setup Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: '20'
      #     cache: 'npm'
      
      # Exemplo de como instalar as depend√™ncias de uma aplica√ß√£o Node.js
      # - name: Install dependencies
      #   run: npm ci

      # Exemplo de como buildar uma aplica√ß√£o Node.js
      # - name: Build application
      #   run: npm run build
      # Assumindo que isso gera os arquivos em ./dist

      # Exemplo de como executar o XGuardian Security Scan
      - name: Executar scan de seguran√ßa
        id: xguardian
        uses: ./.github/actions/xguardian-actions # https://github.com/xmart-xguardian/xguardian-actions
        with:
          api_email: ${{ secrets.API_EMAIL }}
          api_password: ${{ secrets.API_PASSWORD }}
          api_token: ${{ secrets.API_TOKEN }}
          gh_token: ${{ secrets.GH_TOKEN }}
          app_name: ${{ github.event.repository.name }}
          scan_directory: 'dist' # Analisando apenas o c√≥digo buildado
          team_id: '[1]'
          languages: '["JavaScript"]'
          description: "Aplica√ß√£o criada atrav√©s do GitHub Actions - XGuardian"
          policy_sast: '0'
          policy_sca: '0'
          policy_dast: '0'
          policy_container: '0'
          microservices: "false"
          microservices_data: '[{"name": "MS1", "language": ["JavaScript"]}]'
          sast: "true"
          sca: "true"
          translate: "false"
          exclude: '"*.vtt"' # Excluir arquivos de legendas de v√≠deo
          pdf: "false"
          save_vulns: "true"

      # Exemplo de como checar os resultados do scan
      - name: Checar resultados do scan
        run: |
          # Exemplo de como checar se o scan foi conclu√≠do
          echo "Scan completed for build directory: dist"
          echo "Scan ID: ${{ steps.xguardian.outputs.scan_id }}"
          echo "Results available at: ${{ steps.xguardian.outputs.scan_url }}"

      # Exemplo de como utilizar o Slack para notificar o resultado do scan
      # - name: Notificar no Slack
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: secrets.SLACK_WEBHOOK
      #     SLACK_MESSAGE: |
      #       Build e Scan conclu√≠dos
      #       Reposit√≥rio: github.repository
      #       Branch: github.ref_name
      #       Resultados: steps.xguardian.outputs.scan_url

      # - name: Notificar no Microsoft Teams
      #   uses: aliencube/microsoft-teams-actions@v0.8.0
      #   with:
      #     webhook_uri: secrets.MS_TEAMS_WEBHOOK_URI
      #     title: "Resultados do scan de seguran√ßa"
      #     summary: "XGuardian Security Scan conclu√≠do"
      #     sections: |
      #       [{
      #         "activityTitle": "Resultados do scan de seguran√ßa",
      #         "activitySubtitle": "${{ github.repository  - ${{ github.ref_name ",
      #         "facts": [
      #           {
      #             "name": "Status",
      #             "value": "${{ job.status "
      #           },
      #           {
      #             "name": "Scan ID",
      #             "value": "${{ steps.xguardian.outputs.scan_id "
      #           }
      #         ],
      #         "potentialAction": [
      #           {
      #             "@type": "OpenUri",
      #             "name": "View Results",
      #             "targets": [
      #               {
      #                 "os": "default",
      #                 "uri": "${{ steps.xguardian.outputs.scan_url "
      #               }
      #             ]
      #           }
      #         ]
      #       }]

      # - name: Notificar no Zoom Chat
      #   run: |
      #     curl -X POST "https://zoom.us/v2/im/chat/messages" \
      #     -H "Authorization: Bearer ${{ secrets.ZOOM_CHAT_TOKEN " \
      #     -H "Content-Type: application/json" \
      #     -d '{
      #       "to_channel": "security-channel",
      #       "message": "üîí Security Scan completed\nRepository: ${{ github.repository \nResults: ${{ steps.xguardian.outputs.scan_url "
      #     }'